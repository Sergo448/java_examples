// # **Тип данных `int` в Java: полное руководство**

// ## **1. Введение в тип `int`**
// Тип `int` — это 32-битный целочисленный примитивный тип данных, являющийся 
// **основным типом для работы с целыми числами** в Java. Это наиболее часто используемый числовой тип в языке.

// ### **Ключевые характеристики:**
// - Размер: **32 бита (4 байта)**
// - Диапазон: **-2³¹ до 2³¹-1** (-2 147 483 648 до 2 147 483 647)
// - Значение по умолчанию: **0**
// - Литералы: записываются напрямую (`42`, `-10`, `1_000_000`)

// ## **2. Объявление и инициализация**

// ### **2.1. Базовый синтаксис**
// ```java
// int variableName = value;
// ```
// Примеры:
// ```java
// int age = 25;
// int temperature = -15;
// int population = 2_000_000;  // Подчеркивания для читаемости
// ```

// ### **2.2. Особенности инициализации**
// - Литералы по умолчанию имеют тип `int`
// - Присвоение значений за пределами диапазона вызывает ошибку:
// ```java
// int error = 2147483648L;  // Ошибка: требуется суффикс L
// ```
// - Можно использовать шестнадцатеричный, двоичный и восьмеричный форматы:
// ```java
// int hex = 0xFF;      // 255
// int binary = 0b1010; // 10
// int octal = 077;     // 63
// ```

// ## **3. Арифметические операции**

// ### **3.1. Базовые операции**
// ```java
// int a = 10;
// int b = 3;

// int sum = a + b;   // 13
// int diff = a - b;  // 7
// int prod = a * b;  // 30
// int div = a / b;   // 3 (целочисленное деление)
// int mod = a % b;   // 1 (остаток)
// ```

// ### **3.2. Переполнение (overflow)**
// При превышении максимального значения происходит "заворачивание":
// ```java
// int max = 2147483647;
// max++;  // Становится -2147483648
// ```

// ## **4. Сравнение с другими целочисленными типами**

// | Тип      | Размер | Диапазон               | Скорость  | Использование               |
// |----------|--------|------------------------|-----------|-----------------------------|
// | `byte`   | 8 бит  | -128..127              | Медленнее | Бинарные данные             |
// | `short`  | 16 бит | -32 768..32 767        | Медленнее | Редкие случаи               |
// | `int`    | 32 бит | -2³¹..2³¹-1            | Оптимум   | Основной тип для целых чисел|
// | `long`   | 64 бит | -2⁶³..2⁶³-1            | Медленнее | Очень большие числа         |

// **Почему `int` — основной тип?**
// 1. Оптимальный баланс между диапазоном и производительностью
// 2. Нативные операции процессора чаще всего работают с 32-битными числами
// 3. Используется по умолчанию для целочисленных литералов

// ## **5. Особые операции**

// ### **5.1. Битовые операции**
// ```java
// int flags = 0b1100;
// int mask = 0b1010;

// int and = flags & mask;  // 0b1000 (8)
// int or = flags | mask;   // 0b1110 (14)
// int xor = flags ^ mask;  // 0b0110 (6)
// int not = ~flags;        // Инверсия всех битов
// ```

// ### **5.2. Побитовые сдвиги**
// ```java
// int x = 8;              // 0b1000

// int left = x << 2;      // 32 (0b100000)
// int right = x >> 1;     // 4 (0b100)
// int unsigned = x >>> 1; // 4 (0b100)
// ```

// ## **6. Автоупаковка и класс `Integer`**

// ### **6.1. Автоматическое преобразование**
// ```java
// Integer obj = 42;     // Автоупаковка
// int prim = obj;       // Автораспаковка
// ```

// ### **6.2. Кэширование значений**
// Класс `Integer` кэширует значения от **-128 до 127**:
// ```java
// Integer a = 100;
// Integer b = 100;
// System.out.println(a == b);  // true (один объект)

// Integer c = 200;
// Integer d = 200;
// System.out.println(c == d);  // false (разные объекты)
// ```

// ## **7. Практическое применение**

// ### **7.1. Индексы массивов и циклы**
// ```java
// int[] numbers = new int[10];
// for (int i = 0; i < numbers.length; i++) {
//     numbers[i] = i * 2;
// }
// ```

// ### **7.2. Математические вычисления**
// ```java
// int factorial(int n) {
//     int result = 1;
//     for (int i = 2; i <= n; i++) {
//         result *= i;
//     }
//     return result;
// }
// ```

// ## **8. Рекомендации по использованию**

// **Всегда используйте `int`, если:**
// ✅ Работаете с целыми числами в стандартном диапазоне  
// ✅ Нужна максимальная производительность  
// ✅ Пишете циклы или работаете с индексами массивов  

// **Используйте `long`, когда:**
// ❌ Числа могут превышать 2 миллиарда  
// ❌ Работаете с временными метками или большими суммами  

// ## **9. Производительность и оптимизация**
// 1. **JVM оптимизирована** для работы с `int`
// 2. Массивы `int[]` работают **быстрее**, чем `Integer[]`
// 3. Для Android-разработки `int` предпочтительнее из-за ограничений памяти

// ## **10. Заключение**
// Тип `int` — это:
// - **Основной целочисленный тип** в Java
// - **Оптимальный выбор** для большинства вычислений
// - **Баланс** между производительностью и диапазоном значений

// **Главное правило:** По умолчанию используйте `int` для всех целочисленных операций, переходя на `long`
//  только при необходимости работы с очень большими числами.