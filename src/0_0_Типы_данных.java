/* # Типы данных в Java: теоретический анализ */

// ## Введение в систему типов Java

// Java является статически типизированным языком программирования, что означает проверку типов на этапе компиляции. 
// Система типов в Java служит нескольким фундаментальным целям:
// - Обеспечение безопасности типов (type safety)
// - Предоставление семантики операций
// - Оптимизация использования памяти
// - Облегчение проверки корректности программ

// ## Классификация типов данных

// В Java типы данных делятся на две основные категории:

// ### 1. Примитивные типы (primitive types)

// Примитивные типы представляют базовые значения и не являются объектами.
// Они хранятся непосредственно в стеке (для локальных переменных) или в куче как часть объекта.

// Характеристики примитивных типов:
// - Имеют фиксированный размер
// - Не поддерживают вызов методов
// - Не могут быть null
// - Передаются по значению

// #### Таблица примитивных типов:

// | Тип       | Размер (бит) | Диапазон значений                         | Значение по умолчанию |
// |-----------|--------------|-------------------------------------------|-----------------------|
// | byte      | 8            | -128..127                                 | 0                     |
// | short     | 16           | -32_768..32_767                           | 0                     |
// | int       | 32           | -2³¹..2³¹-1                               | 0                     |
// | long      | 64           | -2⁶³..2⁶³-1                               | 0L                    |
// | float     | 32           | IEEE 754 (1.4E-45..3.4E+38)               | 0.0f                  |
// | double    | 64           | IEEE 754 (4.9E-324..1.8E+308)             | 0.0d                  |
// | char      | 16           | '\u0000'..'\uffff' (0..65,535)            | '\u0000'              |
// | boolean   | не определен | true/false                                | false                 |

// *Примечание: спецификация JVM не определяет точный размер boolean,
// обычно используется 1 бит в массивах и 32 бита для переменных.*

// ### 2. Ссылочные типы (reference types)

// Ссылочные типы представляют объекты и хранят ссылки на них. Все ссылочные типы являются подтипами java.lang.Object.

// Основные виды ссылочных типов:
// - **Классы (class types)**: пользовательские классы и классы из стандартной библиотеки
// - **Интерфейсы (interface types)**: определяют контракты без реализации
// - **Массивы (array types)**: упорядоченные коллекции элементов
// - **Перечисления (enum types)**: ограниченные наборы именованных значений
// - **Аннотации (annotation types)**: метаданные для кода

// ## Теоретические аспекты системы типов Java

// ### 1. Номинальная типизация

// Java использует номинальную систему типов (nominal typing), 
//где совместимость типов определяется их объявленными именами, а не структурой.
// Это контрастирует со структурной типизацией, где типы эквивалентны, если имеют одинаковую структуру.

// ### 2. Иерархия типов

// В Java существует строгая иерархия типов:
// - Все ссылочные типы являются подтипами Object
// - Примитивные типы образуют отдельную иерархию
// - Массивы являются ковариантными (String[] является подтипом Object[])

// ### 3. Приведение типов

// В Java существует два вида приведения типов:
// - **Явное (explicit)**: с оператором приведения (Type)
// - **Неявное (implicit)**: автоматическое преобразование (например, int → long)

// Правила приведения:
// - Расширение (widening) примитивов: автоматическое
// - Сужение (narrowing) примитивов: требует явного приведения
// - Преобразование ссылочных типов: проверяется во время выполнения

// ### 4. Параметрический полиморфизм (Generics)

// Система обобщенных типов в Java обеспечивает:
// - Безопасность типов на этапе компиляции
// - Исключение необходимости в явных приведениях
// - Поддержку параметризованных классов и методов

// Особенности реализации:
// - Стирание типов (type erasure)
// - Ограничения на параметры типов (extends/super)
// - Неинвариантность обобщенных типов (List<String> не является подтипом List<Object>)

// ### 5. Автоупаковка и автораспаковка

// Механизм автоматического преобразования между примитивными и соответствующими им объектными типами:
// - **Автоупаковка (autoboxing)**: примитив → объект (int → Integer)
// - **Автораспаковка (unboxing)**: объект → примитив (Integer → int)

// Особенности:
// - Может влиять на производительность
// - Требует осторожности при работе с null
// - Использует кэширование для часто используемых значений

// ## Сравнение с другими языками

// Java отличается от:
// - **C++**: отсутствие unsigned типов, более строгая система типов
// - **Python**: статическая vs динамическая типизация
// - **C#**: похожая система типов, но с дополнительными возможностями (например, value types)

// ## Заключение

// Система типов Java представляет собой компромисс между строгостью и гибкостью, 
// обеспечивая безопасность типов при сохранении относительной простоты.
// Понимание теоретических основ системы типов позволяет более эффективно использовать
// язык и избегать распространенных ошибок. Эволюция Java (например, введение var в Java 10) 
// показывает развитие системы типов в сторону улучшения эргономики без потери безопасности типов.