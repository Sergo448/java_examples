// # **Ссылочные типы данных в Java: классы (class)**

// ## **1. Что такое ссылочные типы в Java?**

// В Java все типы делятся на:
// - **Примитивные** (int, char, boolean и др.) — хранят значения напрямую
// - **Ссылочные** (классы, интерфейсы, массивы) — хранят ссылки на объекты в памяти

// Классы (`class`) — это основной ссылочный тип, представляющий собой "шаблон" для создания объектов.

// ## **2. Особенности ссылочного типа class**

// ### **2.1. Хранение в памяти**
// ```java
Person person = new Person("Иван");
// ```
// - `person` — ссылка (указатель), хранящая адрес объекта в **куче** (heap)
// - Сам объект с данными (`"Иван"`) создается в динамической памяти

// ### **2.2. Сравнение объектов**
// ```java
Person p1 = new Person("Иван");
Person p2 = new Person("Иван");

System.out.println(p1 == p2); // false (сравниваются ссылки)
System.out.println(p1.equals(p2)); // true (если переопределен equals)
// ```

// ### **2.3. Значение по умолчанию**
// Для неинициализированных ссылочных переменных:
// ```java
Person person; // по умолчанию null
// ```

// ## **3. Пример объявления класса**

// ```java
public class Person {
    // Поля (состояние объекта)
    private String name;
    private int age;
    
    // Конструктор
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    // Методы (поведение объекта)
    public void sayHello() {
        System.out.println("Привет, я " + name);
    }
    
    // Геттеры/сеттеры
    public String getName() {
        return name;
    }
}
// ```

// ## **4. Работа со ссылочными типами**

// ### **4.1. Создание объектов**
// ```java
Person person1 = new Person("Анна", 25); // конструктор
Person person2 = person1; // копирование ссылки
// ```

// ### **4.2. Передача в методы**
// ```java
public void modifyPerson(Person p) {
    p.setName("Новое имя"); // изменит оригинальный объект
}
// ```

// ### **4.3. Сборка мусора**
// Объекты автоматически удаляются сборщиком мусора (GC), когда на них нет ссылок.

// ## **5. Особенности ссылок на классы**

// 1. **Наследование**: 
// ```java
class Student extends Person { ... }
// ```

// 2. **Полиморфизм**:
// ```java
Person p = new Student(); // восходящее приведение
// ```

// 3. **Интерфейсы**:
// ```java
class User implements Serializable { ... }
// ```

// ## **6. Отличия от примитивных типов**

// | Характеристика            | Ссылочные типы (class) | Примитивные типы |
// |---------------------------|------------------------|------------------|
// | **Хранение**              | Куча (Heap)            | Стек (Stack)     |
// | **Размер**                | Зависит от объекта     | Фиксированный    |
// | **Значение по умолчанию** | null                   | 0/false          |
// | **Передача в метод**      | По ссылке              | По значению      |

// ## **7. Распространенные классы Java**

// Примеры встроенных классов:
// - `String`
// - `Integer`, `Double` (обертки)
// - `ArrayList`
// - `Scanner`

// ## **8. Заключение**

// Классы как ссылочный тип — это основа ООП в Java:
// - Позволяют создавать сложные структуры данных
// - Реализуют принципы инкапсуляции, наследования, полиморфизма
// - Дают гибкость в работе с памятью

// **Важно помнить:**
// - Ссылки могут быть `null`
// - Несколько ссылок могут указывать на один объект
// - Для сравнения объектов нужно переопределять `equals()` и `hashCode()`