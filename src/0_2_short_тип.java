// # **Тип данных `short` в Java: полный обзор**

// ## **1. Введение в тип `short`**
// Тип `short` в Java — это 16-битный целочисленный примитивный тип данных, 
// предназначенный для хранения небольших целых чисел. Он занимает **2 байта (16 бит)**
//  памяти и может представлять значения в диапазоне от **-32 768 до 32 767**.

// ### **Ключевые характеристики:**
// - Размер: **16 бит (2 байта)**
// - Диапазон: **-32 768 до 32 767**
// - Значение по умолчанию: **0**
// - Применение: экономия памяти при работе с числами, не требующими большого диапазона

// ## **2. Объявление и инициализация**

// ### **2.1. Базовый синтаксис**
// ```java
// short variableName = value;
// ```
// Примеры:
// ```java
// short temperature = -100;
// short daysInYear = 365;
// short maxValue = 32767;
// ```

// ### **2.2. Особенности инициализации**
// - Присвоение значений за пределами диапазона вызывает ошибку компиляции:
// ```java
// short error = 32768; // Ошибка: incompatible types
// ```
// - Можно использовать явное приведение типов, но это может привести к потере данных:
// ```java
// short forced = (short) 32768; // Результат: -32768 (переполнение)
// ```

// ## **3. Арифметические операции**

// ### **3.1. Особенности вычислений**
// Как и с `byte`, арифметические операции с `short` автоматически преобразуют результат в `int`:
// ```java
// short a = 1000;
// short b = 2000;
// short c = (short)(a + b); // Требуется явное приведение
// ```

// ### **3.2. Переполнение**
// При выходе за границы диапазона происходит циклическое переполнение:
// ```java
// short max = 32767;
// max++; // Становится -32768
// short min = -32768;
// min--; // Становится 32767
// ```

// ## **4. Сравнение с другими целочисленными типами**

// | Тип      | Размер (бит) | Диапазон               | Использование                          |
// |----------|--------------|------------------------|----------------------------------------|
// | `byte`   | 8            | -128..127              | Минимальный размер                     |
// | `short`  | 16           | -32 768..32 767        | Средний размер, экономия памяти        |
// | `int`    | 32           | -2³¹..2³¹-1            | Основной тип для целых чисел           |
// | `long`   | 64           | -2⁶³..2⁶³-1            | Очень большие числа                    |

// ## **5. Практическое применение**

// ### **5.1. Экономия памяти в массивах**
// ```java
// short[] sensorReadings = new short[1000]; // Занимает 2 КБ вместо 4 КБ (как int[])
// ```

// ### **5.2. Работа с файлами формата RIFF**
// ```java
// // Чтение 16-битных аудиосэмплов
// short[] audioSamples = new short[sampleCount];
// ```

// ## **6. Автоупаковка и класс `Short`**
// ```java
// Short obj = 1000; // Автоупаковка
// short prim = obj; // Автораспаковка
// ```

// **Кэширование значений:**
// Как и `Byte`, класс `Short` кэширует значения от **-128 до 127**:
// ```java
// Short a = 100;
// Short b = 100;
// System.out.println(a == b); // true (один кэшированный объект)
// ```

// ## **7. Рекомендации по использованию**

// **Когда использовать `short`:**
// ✅ Для больших массивов чисел в указанном диапазоне  
// ✅ При работе с 16-битными данными (аудио, графика)  
// ✅ Когда важна экономия памяти  

// **Когда лучше использовать другие типы:**
// ❌ Для обычных вычислений (предпочитать `int`)  
// ❌ Если возможен выход за границы диапазона  

// ## **8. Заключение**
// Тип `short` в Java — это баланс между экономией памяти (`byte`) и удобством работы (`int`).
// Хотя в большинстве случаев разработчики используют `int`, `short` остается полезным для:
// - Оптимизации больших массивов данных
// - Работы с 16-битными форматами данных
// - Специфических задач, где важна экономия памяти

// **Основное правило:** Используйте `short` осознанно, только когда действительно нужен 
// его специфический размер и диапазон. В остальных случаях предпочтительнее `int`.